package main

import (
	"errors"
	"io"
	"io/ioutil"
	"log"
	"net/http"
	"os"
	"os/exec"
	"path"
	"strings"
)

var mmd2pdfBin string

func init() {
	mmd, err := exec.LookPath("mmd2pdf")
	if err != nil {
		log.Fatal("multimarkdown (and mmd2pdf) need to be installed")
	}
	mmd2pdfBin = mmd
}

func mmdToPdf(in *os.File) (*os.File, error) {

	wd := path.Dir(in.Name())
	_ = os.Chdir(wd)

	yes := exec.Command("yes", "\n")
	mmd2pdf := exec.Command(mmd2pdfBin, in.Name())

	mmd2pdf.Stdin, _ = yes.StdoutPipe()
	_ = mmd2pdf.Start()
	_ = yes.Start()
	_ = mmd2pdf.Wait()
	yes.Process.Kill()

	files, err := ioutil.ReadDir(wd)
	if err != nil {
		log.Printf("Could not read directory %s", wd)
		return nil, err
	}

	var outName string
	for _, f := range files {
		if strings.HasSuffix(f.Name(), ".pdf") {
			outName = f.Name()
			break
		}
	}

	if outName == "" {
		msg := "Could not find the .pdf generated by mmd2pdf"
		log.Fatal(msg)
		return nil, errors.New(msg)
	}

	out, err := os.Open(outName)
	if err != nil {
		log.Printf("Could not open the output PDF file")
		return nil, err
	}
	return out, nil
}

func MMD2PDF(mmdIn io.Reader) (pdf io.Reader, cleanUp func() error, err error) {
	tempDir, err := ioutil.TempDir("", "typesetForge")
	if err != nil {
		log.Fatal("Could not create a temporary directory: " + tempDir)
	}

	cleanUp = func() error {
		return os.RemoveAll(tempDir)
	}

	inputFilePath := path.Join(tempDir, "in.md")

	inputF, err := os.Create(inputFilePath)
	if err != nil {
		log.Fatal("Could not create a temporary file in " + inputFilePath)
	}

	input, err := ioutil.ReadAll(mmdIn)
	if err != nil {
		log.Fatal("Could not read input multimarkdown")
	}
	inputF.Write(input)

	outputF, err := mmdToPdf(inputF)
	if err != nil {
		log.Printf("something went wrong when calling mm2pdf")
		return nil, cleanUp, err
	}

	return outputF, cleanUp, err
}

func handleMultimarkdown(w http.ResponseWriter, r *http.Request) {
	in := r.Body
	out, cleanUp, err := MMD2PDF(in)
	if err != nil {
		log.Fatal("OMFG something didn't go according to plan in MMD2PDF")
	}
	defer cleanUp()

	io.Copy(w, out)
}

func main() {
	http.HandleFunc("/typeset", handleMultimarkdown)

	log.Print("Listening on :8080")
	http.ListenAndServe(":8080", nil)
}
